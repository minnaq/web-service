{"version":3,"sources":["../source/acl.js"],"names":["Access_list","access_list","allowed_subnets","blocked_subnets","statement","trim","subnet","substring","is_valid_ipv4_cidr_subnet","Error","push","cidrSubnet","ip","contains","ipv4_cidr_subnet_regexp","test"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;IAEqBA,W;AAKpB,wBACA;AAAA,MADYC,WACZ,uEAD0B,EAC1B;AAAA;AAAA,OAJAC,eAIA,GAJkB,EAIlB;AAAA,OAHAC,eAGA,GAHkB,EAGlB;AAAA;AAAA;AAAA;;AAAA;AACC,mDAAsBF,WAAtB,4GACA;AAAA,QADSG,SACT;;AACC;AACAA,gBAAYA,UAAUC,IAAV,EAAZ;;AAEA;AACA,QAAID,UAAU,CAAV,MAAiB,GAArB,EACA;AACC,SAAME,SAASF,UAAUG,SAAV,CAAoB,CAApB,CAAf;;AAEA,SAAI,CAACC,0BAA0BF,MAA1B,CAAL,EACA;AACC,YAAM,IAAIG,KAAJ,gCAAuCH,MAAvC,OAAN;AACA;;AAED,UAAKH,eAAL,CAAqBO,IAArB,CAA0B,aAAGC,UAAH,CAAcL,MAAd,CAA1B;AACA;AACD;AAXA,SAaA;AACC,UAAMA,UAASF,SAAf;;AAEA,UAAI,CAACI,0BAA0BF,OAA1B,CAAL,EACA;AACC,aAAM,IAAIG,KAAJ,gCAAuCH,OAAvC,OAAN;AACA;;AAED,WAAKJ,eAAL,CAAqBQ,IAArB,CAA0B,aAAGC,UAAH,CAAcL,OAAd,CAA1B;AACA;AACD;AA9BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BC;;;;uBAEIM,E,EACL;AACC,OAAI,uBAAS,KAAKV,eAAd,KAAkC,uBAAS,KAAKC,eAAd,CAAtC,EACA;AACC,WAAO,IAAP;AACA;;AAJF;AAAA;AAAA;;AAAA;AAMC,qDAAmB,KAAKA,eAAxB,iHACA;AAAA,SADSG,MACT;;AACC,SAAIA,OAAOO,QAAP,CAAgBD,EAAhB,CAAJ,EACA;AACC,aAAO,KAAP;AACA;AACD;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAcC,qDAAmB,KAAKV,eAAxB,iHACA;AAAA,SADSI,QACT;;AACC,SAAIA,SAAOO,QAAP,CAAgBD,EAAhB,CAAJ,EACA;AACC,aAAO,IAAP;AACA;AACD;AApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBC,UAAO,KAAP;AACA;;;;;AAGF;;;kBAlEqBZ,W;AAmErB,IAAMc,0BAA0B,wIAAhC;;AAEA,SAASN,yBAAT,CAAmCF,MAAnC,EACA;AACC,QAAOQ,wBAAwBC,IAAxB,CAA6BT,MAA7B,CAAP;AACA","file":"acl.js","sourcesContent":["import ip from 'ip'\nimport { is_empty } from './helpers'\n\nexport default class Access_list\n{\n\tallowed_subnets = []\n\tblocked_subnets = []\n\n\tconstructor(access_list = [])\n\t{\n\t\tfor (let statement of access_list)\n\t\t{\n\t\t\t// Just in case\n\t\t\tstatement = statement.trim()\n\n\t\t\t// Exclusion pattern\n\t\t\tif (statement[0] === '!')\n\t\t\t{\n\t\t\t\tconst subnet = statement.substring(1)\n\n\t\t\t\tif (!is_valid_ipv4_cidr_subnet(subnet))\n\t\t\t\t{\n\t\t\t\t\tthrow new Error(`Invalid IPv4 CIDR subnet \"${subnet}\"`)\n\t\t\t\t}\n\n\t\t\t\tthis.blocked_subnets.push(ip.cidrSubnet(subnet))\n\t\t\t}\n\t\t\t// Inclusion pattern\n\t\t\telse\n\t\t\t{\n\t\t\t\tconst subnet = statement\n\n\t\t\t\tif (!is_valid_ipv4_cidr_subnet(subnet))\n\t\t\t\t{\n\t\t\t\t\tthrow new Error(`Invalid IPv4 CIDR subnet \"${subnet}\"`)\n\t\t\t\t}\n\n\t\t\t\tthis.allowed_subnets.push(ip.cidrSubnet(subnet))\n\t\t\t}\n\t\t}\n\t}\n\n\ttest(ip)\n\t{\n\t\tif (is_empty(this.allowed_subnets) && is_empty(this.blocked_subnets))\n\t\t{\n\t\t\treturn true\n\t\t}\n\n\t\tfor (let subnet of this.blocked_subnets)\n\t\t{\n\t\t\tif (subnet.contains(ip))\n\t\t\t{\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\tfor (let subnet of this.allowed_subnets)\n\t\t{\n\t\t\tif (subnet.contains(ip))\n\t\t\t{\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\n\t\treturn false\n\t}\n}\n\n// http://blog.markhatton.co.uk/2011/03/15/regular-expressions-for-ip-addresses-cidr-ranges-and-hostnames/\nconst ipv4_cidr_subnet_regexp = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$/\n\nfunction is_valid_ipv4_cidr_subnet(subnet)\n{\n\treturn ipv4_cidr_subnet_regexp.test(subnet)\n}"]}