{"version":3,"sources":["../source/web service.js"],"names":["web_service","options","development","process","env","NODE_ENV","result","web","proxy","compress","use","log","debug","console","info","bind","warn","error","markup_settings","error_html","access_list","level","timeLimit","detect_locale","ctx","locale","getLocaleFromQuery","getLocaleFromCookie","getLocaleFromHeader","keys","authentication","validate_token","session","redis","parse_body","routing","formLimit","extensions","middleware","key","proxies","shut_down","next","status","message","pending","push","close","all","connections","getConnections","file_upload","Error","apply","arguments","upload","serve_static_files","url_path","filesystem_path","maxAge","files","mount","path","handler","from_path","to","proxy_options","redirect","from","rewrite","listen","port","host","resolve","reject","method","url","http_web_server","createServer","koa_callback","callback","on","request","response","checkContinue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;kBAmIwBA,W;;AAnIxB;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,WAAT,GACf;AAAA,KADoCC,OACpC,uEAD8C,EAC9C;;AACC;AACA,KAAMC,cAAcC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7C;;AAEA;AACA,KAAMC,SAAS,EAAf;;AAEA;AACA,KAAMC,MAAM,mBAAZ;;AAEA;AACA;AACAA,KAAIC,KAAJ,GAAY,IAAZ;;AAEA;AACA;AACA,KAAIP,QAAQQ,QAAZ,EACA;AACC;AACA;AACAF,MAAIG,GAAJ,CAAQ,4BAAR;AACA;;AAED;AACA,KAAMC,MAAMV,QAAQU,GAAR,IACZ;AACCC,SAAQC,QAAQC,IAAR,CAAaC,IAAb,CAAkBF,OAAlB,CADT;AAECC,QAAQD,QAAQC,IAAR,CAAaC,IAAb,CAAkBF,OAAlB,CAFT;AAGCG,QAAQH,QAAQG,IAAR,CAAaD,IAAb,C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","file":"web service.js","sourcesContent":["import path from 'path'\nimport fs   from 'fs'\n\nimport http  from 'http'\nimport https from 'https'\n\nimport koa           from 'koa'\nimport body_parser   from 'koa-bodyparser'\nimport mount         from 'koa-mount'\nimport koa_logger    from 'koa-bunyan'\nimport compress      from 'koa-compress'\nimport statics       from 'koa-static'\nimport koa_locale    from 'koa-locale'\n\nimport errors      from './errors'\nimport promisify   from './promisify'\nimport { is_object, ends_with } from './helpers'\n\nimport error_handler  from './middleware/error handler'\nimport authentication from './middleware/authentication'\nimport proxier        from './middleware/proxy'\nimport file_upload    from './middleware/file upload'\nimport acl            from './middleware/acl'\nimport session        from './middleware/session'\nimport routing        from './middleware/routing'\nimport redirect       from './middleware/redirect'\nimport rewrite        from './middleware/rewrite'\n\n// Sets up a Web Server instance (based on Koa)\n//\n// options:\n//\n// compress            - enables tar/gz compression of Http response data\n//\n// detect_locale       - extracts locale from Http Request headers \n//                       and places it into ctx.locale\n//\n// session             - tracks user session (ctx.session)\n//\n// authentication      - uses a JWT token as a means of user authentication\n//                       (should be a function transforming token payload into user info)\n//\n// parse_body          - parse Http Post requests body (default: false; true when using routing)\n//\n// routing             - enables Rest Http routing\n//                       (usage: web.get('/path', parameters => return 'Echo'))\n//\n// log                 - bunyan log instance\n//\n// returns an object with properties:\n//\n//   shut_down() - gracefully shuts down the server (not tested)\n//\n//   upload() - enables file upload functionality\n//\n//     parameters:\n//\n//       path           - the URL path to mount this middleware at (defaults to /)\n//\n//       upload_folder  - where to write the files\n//\n//       multiple_files - set this flag to true in case of multiple file upload\n//\n//   files() - enables serving static files\n//\n//     parameters:\n//\n//       url_path        - the URL path to mount this middleware at\n//\n//       filesystem_path - the corresponding filesystem path where the static files reside\n//\n//   listen() - starts listening for requests\n//\n//     parameters:\n//\n//       port - the TCP port to listen on\n//       host - the TCP host to listen on (defaults to 0.0.0.0)\n//\n//     returns: a Promise\n//\n//   mount() - mounts a Koa middleware at a path\n//\n//     parameters:\n//\n//       path       - the URL path to mount the middleware at\n//       middleware - the middleware to mount\n//\n//   use() - standard Koa .use() method\n//\n//   redirect() - HTTP redirect helper\n//\n//     parameters:\n//\n//       from       - the base URL path from which to redirect\n//\n//       options:\n//\n//         to       - the base URL (or path) to which the redirect will be performed\n//\n//         exact    - redirect to `to` only in case of exact URL path match (`url.path === from`)\n//\n//         match    - custom URL matching function match({ url, path, querystring, query });\n//                    should return a URL (or a path) to which the redirect will be performed;\n//                    if it returns nothing then the redirect won't be performed.\n//\n//         status   - HTTP redirection status (defaults to 301 (Moved Permanently))\n//                    (e.g. can be set to 302 (Moved Temporarily))\n//\n//   rewrite() - Rewrites HTTP request URL (for further matching)\n//\n//     parameters:\n//\n//       from       - the base URL path on which to rewrite\n//\n//       options:\n//\n//         to       - the base URL (or path) to which to rewrite the HTTP request URL\n//\n//         exact    - rewrite to `to` only in case of exact URL path match (`url.path === from`)\n//\n//         match    - custom URL matching function match({ url, path, querystring, query });\n//                    should return a URL (or a path) to which to rewrite the HTTP request URL;\n//                    if it returns nothing then the URL won't be rewritten.\n//\n//   proxy() - proxies all requests for this path to another web server\n//\n//     parameters:\n//\n//       path        - the URL path to mount the requests for\n//       destination - where to proxy these requests to\n//\nexport default function web_service(options = {})\n{\n\t// In development mode errors are printed as HTML\n\tconst development = process.env.NODE_ENV !== 'production'\n\n\t// This object will be returned\n\tconst result = {}\n\n\t// Create a Koa web application\n\tconst web = new koa()\n\n\t// Trust `X-Forwarded-For` HTTP header\n\t// https://en.wikipedia.org/wiki/X-Forwarded-For\n\tweb.proxy = true\n\n\t// Compresses HTTP response with GZIP\n\t// (better delegate this task to NginX or HAProxy in production)\n\tif (options.compress)\n\t{\n\t\t// хз, нужно ли сжатие в node.js: мб лучше поставить впереди nginx'ы, \n\t\t// и ими сжимать, чтобы не нагружать процесс node.js\n\t\tweb.use(compress())\n\t}\n\n\t// Dummy log in case no `log` supplied\n\tconst log = options.log ||\n\t{\n\t\tdebug : console.info.bind(console),\n\t\tinfo  : console.info.bind(console),\n\t\twarn  : console.warn.bind(console),\n\t\terror : console.error.bind(console)\n\t}\n\n\t// Is used in `api.js`\n\tresult.log = log\n\n\t// Handle all subsequent errors\n\tweb.use(error_handler({ development, log, markup_settings: options.error_html }))\n\n\t// If an Access Control List is set,\n\t// then allow only IPs from the list of subnets.\n\t// (this is a \"poor man\"'s ACL, better use a real firewall)\n\tif (options.access_list)\n\t{\n\t\tweb.use(acl(options.access_list))\n\t}\n\n\t// Outputs Apache-style logs for incoming HTTP requests.\n\t// E.g. \"GET /users?page=2 200 466ms 4.66kb\"\n\tif (options.debug)\n\t{\n\t\tweb.use(koa_logger(log,\n\t\t{\n\t\t\t// which level you want to use for logging.\n\t\t\t// default is info\n\t\t\tlevel: 'debug',\n\t\t\t// this is optional. Here you can provide request time in ms,\n\t\t\t// and all requests longer than specified time will have level 'warn'\n\t\t\ttimeLimit: 100\n\t\t}))\n\t}\n\n\tif (options.detect_locale)\n\t{\n\t\t// Gets locale from HTTP request\n\t\t// (the second parameter is the HTTP GET query parameter name\n\t\t//  and also the cookie name)\n\t\tkoa_locale(web, 'locale')\n\n\t\t// Sets `ctx.locale` variable for reference\n\t\tweb.use(async function(ctx)\n\t\t{\n\t\t\tctx.locale = ctx.getLocaleFromQuery() || ctx.getLocaleFromCookie() || ctx.getLocaleFromHeader()\n\t\t})\n\t}\n\n\t// Secret keys (used for JWT token signing, for example)\n\tweb.keys = options.keys\n\n\t// Enable JWT authentication\n\tif (options.authentication)\n\t{\n\t\tweb.use(authentication\n\t\t({\n\t\t\tauthentication : options.authentication,\n\t\t\tkeys           : options.keys,\n\t\t\tvalidate_token : options.validate_token\n\t\t}))\n\t}\n\n\t// Sessions aren't currently used\n\tif (options.session)\n\t{\n\t\tweb.use(session(options.redis))\n\t}\n\n\t// Checks if `parse_body` needs to be set to `true`\n\t// (that's the case for routing)\n\tif (options.parse_body !== false && options.routing === true)\n\t{\n\t\toptions.parse_body = true\n\t}\n\n\t// Enables HTTP POST body parsing\n\tif (options.parse_body)\n\t{\n\t\t// Set up http post request handling.\n\t\t// Usage: ctx.request.body\n\t\tweb.use(body_parser({ formLimit: '100mb' }))\n\t}\n\n\t// Enables REST routing\n\tif (options.routing)\n\t{\n\t\tconst { extensions, middleware } = routing\n\t\t({\n\t\t\tkeys       : options.keys,\n\t\t\trouting    : options.routing,\n\t\t\tparse_body : options.parse_body\n\t\t})\n\n\t\t// Injects REST routing methods to `result` object.\n\t\tfor (let key of Object.keys(extensions))\n\t\t{\n\t\t\tresult[key] = extensions[key]\n\t\t}\n\n\t\tfor (let use of middleware)\n\t\t{\n\t\t\tweb.use(use)\n\t\t}\n\t}\n\n\t// Active HTTP proxy servers\n\tconst proxies = []\n\n\t// HTTP server shutdown flag\n\tlet shut_down = false\n\n\t// In case of server shutdown, stop accepting new HTTP connections.\n\t// (this code wasn't tested)\n\tweb.use(async function (ctx, next)\n\t{\n\t\tif (shut_down)\n\t\t{\n\t\t\tctx.status = 503\n\t\t\tctx.message = 'The server is shutting down for maintenance'\n\t\t}\n\t\telse\n\t\t{\n\t\t\tawait next()\n\t\t}\n\t})\n\n\t// Shuts down the HTTP server.\n\t// Returns a Promise.\n\t// (this method wasn't tested)\n\tresult.shut_down = function()\n\t{\n\t\tshut_down = true\n\n\t\t// Pending promises\n\t\tconst pending = []\n\n\t\t// Shut down http proxies\n\t\tfor (let proxy of proxies)\n\t\t{\n\t\t\tpending.push(promisify(proxy.close, proxy)())\n\t\t}\n\n\t\t// Stops the server from accepting new connections and keeps existing connections. \n\t\t//\n\t\t// The optional callback will be called once the 'close' event occurs. \n\t\t// Unlike that event, it will be called with an Error as its only argument \n\t\t// if the server was not open when it was closed.\n\t\t//\n\t\tpending.push(promisify(web.close, web)())\n\n\t\treturn Promise.all(pending)\n\t}\n\n\t// Returns the number of currently present HTTP connections.\n\t// (this method wasn't tested)\n\tresult.connections = function()\n\t{\n\t\t// http_server.getConnections()\n\t\treturn promisify(web.getConnections, web)()\n\t}\n\n\t// Enables handling file uploads.\n\t// Takes an object with parameters.\n\tresult.file_upload = function()\n\t{\n\t\t// Check for misconfiguration\n\t\tif (options.parse_body)\n\t\t{\n\t\t\tthrow new Error(`.file_upload() was enabled but also \"parse_body\" wasn't set to false, therefore Http POST request bodies are parsed which creates a conflict. Set \"parse_body\" parameter to false.`)\n\t\t}\n\n\t\t// Enable file uploading middleware\n\t\tweb.use(file_upload.apply(this, arguments))\n\t}\n\n\t// Shorter alias for file uploads\n\tresult.upload = result.file_upload\n\n\t// Serves static files\n\t// (better do it with NginX or HAProxy in production)\n\tresult.serve_static_files = function(url_path, filesystem_path, options = {})\n\t{\n\t\t// Cache them in the web browser for 1 year by default\n\t\tconst maxAge = options.maxAge || 365 * 24 * 60 * 60\n\t\t// https://github.com/koajs/static\n\t\tweb.use(mount(url_path, statics(filesystem_path, { maxAge })))\n\t}\n\n\t// Shorter alias for static files serving\n\tresult.files = result.serve_static_files\n\n\t// Mounts Koa middleware at path\n\tresult.mount = (path, handler) =>\n\t{\n\t\tweb.use(mount(path, handler))\n\t}\n\n\t// exposes Koa .use() function for custom middleware\n\tresult.use = web.use.bind(web)\n\n\t// Proxies all URLs starting with 'from_path' to another server\n\t// (make sure you proxy only to your own servers\n\t//  so that you don't leak cookies or JWT tokens to the 3rd party)\n\tresult.proxy = (from_path, to, proxy_options) =>\n\t{\n\t\tconst { proxy, middleware } = proxier(from_path, to, proxy_options)\n\t\tproxies.push(proxy)\n\t\tweb.use(middleware)\n\t}\n\n\t// Redirection helper\n\tresult.redirect = (from, options) =>\n\t{\n\t\tweb.use(redirect(from, options))\n\t}\n\n\t// URL rewrite\n\tresult.rewrite = (from, options) =>\n\t{\n\t\tweb.use(rewrite(from, options))\n\t}\n\n\t// Runs http server.\n\t// Returns a Promise resolving to an instance of HTTP server.\n\tresult.listen = (port, host) =>\n\t{\n\t\tif (is_object(port))\n\t\t{\n\t\t\thost = port.host\n\t\t\tport = port.port\n\t\t}\n\n\t\thost = host || '0.0.0.0'\n\n\t\treturn new Promise((resolve, reject) =>\n\t\t{\n\t\t\t// The last route - throws \"Not found\" error\n\t\t\tweb.use(async function(ctx)\n\t\t\t{\n\t\t\t\tctx.status = 404\n\t\t\t\tctx.message = `The requested resource not found: ${ctx.method} ${ctx.url}`\n\t\t\t\t\n\t\t\t\t// Reduces noise in the `log` in case of errors\n\t\t\t\t// (web browsers query '/favicon.ico' automatically)\n\t\t\t\tif (!ends_with(ctx.path, '/favicon.ico'))\n\t\t\t\t{\n\t\t\t\t\tlog.error(ctx.message, 'Web server error: Not found')\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// Create HTTP server\n\t\t\tconst http_web_server = http.createServer()\n\n\t\t\t// // Enable Koa for handling HTTP requests\n\t\t\t// http_web_server.on('request', web.callback())\n\n\t\t\t// Copy-pasted from \n\t\t\t// https://github.com/koajs/koala/blob/master/lib/app.js\n\t\t\t//\n\t\t\t// \"Expect: 100-continue\" is something related to http request body parsing\n\t\t\t// http://crypto.pp.ua/2011/02/mexanizm-expectcontinue/\n\t\t\t//\n\t\t\tconst koa_callback = web.callback()\n\t\t\thttp_web_server.on('request', koa_callback)\n\t\t\thttp_web_server.on('checkContinue', function(request, response)\n\t\t\t{\n\t\t\t\t// Requests with `Expect: 100-continue`\n\t\t\t\trequest.checkContinue = true\n\t\t\t\tkoa_callback(request, response)\n\t\t\t})\n\n\t\t\t// Starts HTTP server\n\t\t\thttp_web_server.listen(port, host, error =>\n\t\t\t{\n\t\t\t\tif (error)\n\t\t\t\t{\n\t\t\t\t\treturn reject(error)\n\t\t\t\t}\n\n\t\t\t\tresolve(http_web_server)\n\t\t\t})\n\t\t\t// .on('connection', () => connections++)\n\t\t\t// .on('close', () => connections--)\n\t\t})\n\t}\n\n\t// done\n\treturn result\n}"]}