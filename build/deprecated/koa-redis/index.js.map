{"version":3,"sources":["../../../source/deprecated/koa-redis/index.js"],"names":["EventEmitter","require","debug","redis","redisWrapper","util","RedisStore","module","exports","options","call","client","auth_pass","pass","path","socket","createClient","duplicate","dupClient","db","select","on","send_anyways","emit","bind","connected","_redisClient","inherits","prototype","get","sid","data","JSON","parse","toString","message","set","sess","ttl","Math","ceil","setex","destroy","del","bump","expire","quit","end"],"mappings":"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","file":"index.js","sourcesContent":["/**!\n * koa-redis - index.js\n * Copyright(c) 2015\n * MIT Licensed\n *\n * Authors:\n *   dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar debug = require('debug')('koa-redis');\nvar redis = require('redis');\nvar redisWrapper = require('co-redis');\nvar util = require('util');\n\n/**\n * Initialize redis session middleware with `opts` (see the README for more info):\n *\n * @param {Object} options\n *   - {Object} client       redis client (overides all other options except db and duplicate)\n *   - {String} socket       redis connect socket (DEPRECATED: use 'path' instead)\n *   - {String} db           redis db\n *   - {Boolean} duplicate   if own client object, will use node redis's duplicate function and pass other options\n *   - {String} pass         redis password (DEPRECATED: use 'auth_pass' instead)\n *   - {Any} [any]           all other options inclduing above are passed to node_redis\n */\nvar RedisStore = module.exports = function (options) {\n  if (!(this instanceof RedisStore)) {\n    return new RedisStore(options);\n  }\n  EventEmitter.call(this);\n  options = options || {};\n\n  var client;\n  options.auth_pass = options.auth_pass || options.pass || null;     // For backwards compatibility\n  options.path = options.path || options.socket || null;             // For backwards compatibility\n  if (!options.client) {\n    debug('Init redis new client');\n    client = redis.createClient(options);\n  } else {\n    if (options.duplicate) {                                         // Duplicate client and update with options provided\n      debug('Duplicating provided client with new options (if provided)');\n      var dupClient = options.client;\n      delete options.client;\n      delete options.duplicate;\n      client = dupClient.duplicate(options);                         // Useful if you want to use the DB option without adjusting the client DB outside koa-redis\n    } else {\n      debug('Using provided client');\n      client = options.client;\n    }\n  }\n\n  if (options.db) {\n    debug('selecting db %s', options.db)\n    client.select(options.db);\n    client.on('connect', function() {\n      client.send_anyways = true;\n      client.select(options.db);\n      client.send_anyways = false;\n    });\n  }\n\n  client.on('error', this.emit.bind(this, 'error'));\n  client.on('end', this.emit.bind(this, 'end'));\n  client.on('end', this.emit.bind(this, 'disconnect'));              // For backwards compatibility\n  client.on('connect', this.emit.bind(this, 'connect'));\n  client.on('reconnecting', this.emit.bind(this, 'reconnecting'));\n  client.on('ready', this.emit.bind(this, 'ready'));\n  client.on('drain', this.emit.bind(this, 'drain'));\n  client.on('idle', this.emit.bind(this, 'idle'));\n  this.on('connect', function() {\n    debug('connected to redis');\n    this.connected = client.connected;\n  });\n  this.on('ready', function() {\n    debug('redis ready');\n  });\n  this.on('end', function() {\n    debug('redis ended');\n    this.connected = client.connected;\n  });\n  // No good way to test error\n  /* istanbul ignore next */\n  this.on('error', function() {\n    debug('redis error');\n    this.connected = client.connected;\n  });\n  // No good way to test reconnect\n  /* istanbul ignore next */\n  this.on('reconnecting', function() {\n    debug('redis reconnecting');\n    this.connected = client.connected;\n  });\n  this.on('drain', function() {\n    debug('redis drain');\n    this.connected = client.connected;\n  });\n  this.on('idle', function() {\n    debug('redis idle');\n    this.connected = client.connected;\n  });\n\n  //wrap redis\n  this._redisClient = client;\n  this.client = redisWrapper(client);\n  this.connected = client.connected;\n};\n\nutil.inherits(RedisStore, EventEmitter);\n\nRedisStore.prototype.get = function *(sid) {\n  var data = yield this.client.get(sid);\n  debug('get session: %s', data || 'none');\n  if (!data) {\n    return null;\n  }\n  try {\n    return JSON.parse(data.toString());\n  } catch (err) {\n    // ignore err\n    debug('parse session error: %s', err.message);\n  }\n};\n\nRedisStore.prototype.set = function *(sid, sess, ttl) {\n  if (typeof ttl === 'number') {\n    ttl = Math.ceil(ttl / 1000);\n  }\n  sess = JSON.stringify(sess);\n  if (ttl) {\n    debug('SETEX %s %s %s', sid, ttl, sess);\n    yield this.client.setex(sid, ttl, sess);\n  } else {\n    debug('SET %s %s', sid, sess);\n    yield this.client.set(sid, sess);\n  }\n  debug('SET %s complete', sid);\n};\n\nRedisStore.prototype.destroy = function *(sid) {\n  debug('DEL %s', sid);\n  yield this.client.del(sid);\n  debug('DEL %s complete', sid);\n};\n\nRedisStore.prototype.bump = function *(sid, ttl) {\n  if (typeof ttl === 'number') {\n    ttl = Math.ceil(ttl / 1000);\n  }\n  debug('EXPIRE %s %s', sid, ttl);\n  yield this.client.expire(sid, ttl);\n  debug('EXPIRE %s %s complete', sid, ttl);\n};\n\nRedisStore.prototype.quit = function* () {                         // End connection SAFELY\n  debug('quitting redis client');\n  yield this.client.quit();\n};\n\nRedisStore.prototype.end = RedisStore.prototype.quit;              // End connection SAFELY. The real end() command should never be used, as it cuts off to queue.\n"]}