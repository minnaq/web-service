{"version":3,"sources":["../../source/middleware/redirect.js"],"names":["redirect","match","from","options","status","rest_options","ctx","next","destination","Error","to","exact","url","substring","length"],"mappings":";;;;;;;;;;;;;;;;;;kBAGwBA,Q;QAsBRC,K,GAAAA,K;;AAzBhB;;;;AAEA;AACe,SAASD,QAAT,CAAkBE,IAAlB,EACf;AAAA,KADuCC,OACvC,uEADiD,EACjD;AAAA,KACSC,MADT,GACqCD,OADrC,CACSC,MADT;AAAA,KACoBC,YADpB,0CACqCF,OADrC;;;AAGC;AAAA,wEAAO,iBAAeG,GAAf,EAAoBC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEAC,kBAFA,GAEcP,MAAMK,GAAN,EAAWJ,IAAX,EAAiBG,YAAjB,CAFd;;AAIN;;AAJM,WAKDG,WALC;AAAA;AAAA;AAAA;;AAAA,wCAOED,MAPF;;AAAA;;AAUN;AACAD,WAAIF,MAAJ,GAAaA,UAAU,GAAvB;AACAE,WAAIN,QAAJ,CAAaQ,WAAb;;AAZM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;;AAAA;AAAA;AAAA;AAAA;AAcA;;AAED;AACA;AACO,SAASP,KAAT,CAAeK,GAAf,EAAoBJ,IAApB,EAA0BC,OAA1B,EACP;AACC;AACA,KAAI,CAAC,0BAAYD,IAAZ,EAAkB,GAAlB,CAAL,EACA;AACC,QAAM,IAAIO,KAAJ,4BAAmCP,IAAnC,iCAAN;AACA;;AALF,KAOSD,KAPT,GAO8BE,OAP9B,CAOSF,KAPT;AAAA,KAOgBS,EAPhB,GAO8BP,OAP9B,CAOgBO,EAPhB;AAAA,KAOoBC,KAPpB,GAO8BR,OAP9B,CAOoBQ,KAPpB;;AASC;;AACA,KAAIV,KAAJ,EACA;AACC,SAAOA,MAAMK,GAAN,CAAP;AACA;;AAED;AACA,KAAI,CAACI,EAAL,EACA;AACC,QAAM,IAAID,KAAJ,4CAAN;AACA;;AAED;AACA,KAAI,CAAC,0BAAYH,IAAIM,GAAhB,EAAqBV,IAArB,CAAL,EACA;AACC;AACA;;AAED;;AAEA;AACA,KAAIS,KAAJ,EACA;AACC;AACA,MAAIL,IAAIM,GAAJ,KAAYV,IAAhB,EACA;AACC,UAAOQ,EAAP;AACA;;AAED;AACA;AACA;;AAED,QAAOA,KAAKJ,IAAIM,GAAJ,CAAQC,SAAR,CAAkBX,KAAKY,MAAvB,CAAZ;AACA","file":"redirect.js","sourcesContent":["import { starts_with } from '../helpers'\n\n// Redirection helper\nexport default function redirect(from, options = {})\n{\n\tconst { status, ...rest_options } = options\n\n\treturn async function(ctx, next)\n\t{\n\t\tconst destination = match(ctx, from, rest_options)\n\n\t\t// If no match, then don't redirect\n\t\tif (!destination)\n\t\t{\n\t\t\treturn next()\n\t\t}\n\n\t\t// Perform the redirect\n\t\tctx.status = status || 301\n\t\tctx.redirect(destination)\n\t}\n}\n\n// Checks if HTTP request URL matches the conditions.\n// Returns a new URL (or path)\nexport function match(ctx, from, options)\n{\n\t// Validate `from`\n\tif (!starts_with(from, '/'))\n\t{\n\t\tthrow new Error(`Invalid \"from\" path: \"${from}\". Must start with a slash.`)\n\t}\n\n\tconst { match, to, exact } = options\n\n\t// In case of user supplied custom matching function\n\tif (match)\n\t{\n\t\treturn match(ctx)\n\t}\n\n\t// Validate `to`\n\tif (!to)\n\t{\n\t\tthrow new Error(`\"to\" was not passed for redirect/rewrite`)\n\t}\n\n\t// If HTTP request URL doesn't match `from`, then no match\n\tif (!starts_with(ctx.url, from))\n\t{\n\t\treturn\n\t}\n\n\t// HTTP request URL matches `from`\n\n\t// In case of exact path match\n\tif (exact)\n\t{\n\t\t// Check for an exact match\n\t\tif (ctx.url === from)\n\t\t{\n\t\t\treturn to\n\t\t}\n\n\t\t// In case of no exact match, no match\n\t\treturn\n\t}\n\n\treturn to + ctx.url.substring(from.length)\n}\n"]}