{"version":3,"sources":["../../source/middleware/error handler.js"],"names":["development","log","markup_settings","ctx","next","http_status_code","status","data","error_data","message","body","error","render_stack_trace","response_status","response_body","type","set","stack","html","response","headers","split","trim","stack_trace","original"],"mappings":"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","file":"error handler.js","sourcesContent":["import { html as html_stack_trace } from 'print-error'\nimport { exists, is_object } from '../helpers'\n\nexport default function({ development, log, markup_settings })\n{\n\treturn async function(ctx, next)\n\t{\n\t\ttry\n\t\t{\n\t\t\t// // measure Http request processing time\n\t\t\t// const key = `${ctx.host}${ctx.url}`\n\n\t\t\t// // started processing Http request\n\t\t\t// console.time(key)\n\n\t\t\t// try to respond to this Http request\n\t\t\tawait next()\n\n\t\t\t// // finished processing Http request\n\t\t\t// console.timeEnd(key)\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\t// HTTP response status code\n\t\t\tlet http_status_code\n\n\t\t\t// If this error has an HTTP status code set,\n\t\t\t// then this status code will be used when sending HTTP response.\n\t\t\t// (this also works for `superagent` errors because they too have the `status` property)\n\t\t\tif (typeof error.status === 'number')\n\t\t\t{\n\t\t\t\thttp_status_code = error.status\n\t\t\t}\n\n\t\t\t// If HTTP response status code has been obtained, then use it.\n\t\t\tif (http_status_code)\n\t\t\t{\n\t\t\t\t// Set Http Response status code according to the error's `code`\n\t\t\t\tctx.status = http_status_code\n\n\t\t\t\t// Set Http Response according to the error thrown\n\t\t\t\tif (is_object(error.data))\n\t\t\t\t{\n\t\t\t\t\tconst error_data = error.data\n\n\t\t\t\t\tif (!exists(error_data.message))\n\t\t\t\t\t{\n\t\t\t\t\t\terror_data.message = error.message\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!exists(error_data.status))\n\t\t\t\t\t{\n\t\t\t\t\t\terror_data.status = error.status\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.body = error_data\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tctx.body = error.message || 'Internal error'\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Else, if no HTTP response status code was specified,\n\t\t\t// default to 500 and a generic error message.\n\t\t\telse\n\t\t\t{\n\t\t\t\t// log the error, if it's not a normal Api error\n\t\t\t\t// (prevents log pollution with things like \n\t\t\t\t//  `404 User not found` or `401 Not authenticated`)\n\n\t\t\t\t// if (error.proxy_error \n\t\t\t\t// \t&& options.show_proxy_errors \n\t\t\t\t// \t&& options.show_proxy_errors[error.proxy_to] === false)\n\t\t\t\t// {\n\t\t\t\t// \t// don't output error to the log\n\t\t\t\t// }\n\t\t\t\t// else\n\t\t\t\t// {\n\t\t\t\t// \t// for easier debugging\n\t\t\t\t// \tconsole.log('(http request failed)')\n\t\t\t\t// \tlog.error(error)\n\t\t\t\t// }\n\n\t\t\t\tlog.error(error)\n\n\t\t\t\tctx.status = 500\n\t\t\t\tctx.body = 'Internal error'\n\t\t\t}\n\n\t\t\t// (in development mode)\n\t\t\t// Show stack trace for generic errors for easier debugging\n\t\t\tif (development)\n\t\t\t{\n\t\t\t\t// If it was a generic (unspecific) error,\n\t\t\t\t// then render its stack trace.\n\t\t\t\tif (!http_status_code)\n\t\t\t\t{\n\t\t\t\t\tconst { response_status, response_body } = render_stack_trace(error, { markup_settings, log })\n\n\t\t\t\t\tif (response_body)\n\t\t\t\t\t{\n\t\t\t\t\t\tctx.status = response_status || 500\n\t\t\t\t\t\tctx.body = response_body\n\t\t\t\t\t\tctx.type = 'html'\n\n\t\t\t\t\t\t// Can be used to reconstruct the original error message\n\t\t\t\t\t\tctx.set('X-Error-Message', error.message)\n\t\t\t\t\t\t// Can be used to reconstruct the original error stack trace\n\t\t\t\t\t\tctx.set('X-Error-Stack-Trace', JSON.stringify(error.stack))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Renders the stack trace of an error as HTML markup\nfunction render_stack_trace(error, { markup_settings, log })\n{\n\t// Supports custom `html` for an error\n\tif (error.html)\n\t{\n\t\treturn { response_status: error.status, response_body: error.html }\n\t}\n\n\t// Handle `superagent` errors\n\t// https://github.com/visionmedia/superagent/blob/29ca1fc938b974c6623d9040a044e39dfb272fed/lib/node/response.js#L106\n\tif (error.response && typeof error.status === 'number')\n\t{\n\t\t// If the `superagent` http request returned an HTML response \n\t\t// (possibly an error stack trace),\n\t\t// then just output that stack trace.\n\t\tif (error.response.headers['content-type']\n\t\t\t&& error.response.headers['content-type'].split(';')[0].trim() === 'text/html')\n\t\t{\n\t\t\treturn { response_status: error.status, response_body: error.message }\n\t\t}\n\t}\n\n\t// If this error has a stack trace then it can be shown\n\n\tlet stack_trace\n\n\tif (error.stack)\n\t{\n\t\tstack_trace = error.stack\n\t}\n\t// `superagent` errors have the `original` property \n\t// for storing the initial error\n\telse if (error.original && error.original.stack)\n\t{\n\t\tstack_trace = error.original.stack\n\t}\n\n\t// If this error doesn't have a stack trace - do nothing\n\tif (!stack_trace)\n\t{\n\t\treturn {}\n\t}\n\n\t// Render the error's stack trace as HTML markup\n\ttry\n\t{\n\t\treturn { response_body: html_stack_trace({ stack: stack_trace }, markup_settings) }\n\t}\n\tcatch (error)\n\t{\n\t\tlog.error(error)\n\n\t\t// If error stack trace couldn't be rendered as HTML markup,\n\t\t// then just output it as plain text.\n\t\treturn { response_body: error.stack }\n\t}\n}\n"]}