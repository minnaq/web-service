{"version":3,"sources":["../../source/middleware/routing.js"],"names":["options","router","extensions","method","path","action","ctx","next","session","session_id","sessionId","destroy_session","get_cookie","cookies","get","name","set_cookie","value","expires","Date","set","destroy_cookie","parameters","request","body","query","params","key","http_client","jwt","jwt_header","destination","data","headers","Authorization","result","bind","ip","user","authentication_error","authentication_token_id","jwt_id","authentication_token","keys","internal_http","respond","is_redirect","redirect","Error","toUpperCase","originalUrl","inspect","status","type","then","error","routing","parse_body","middleware","routes","allowedMethods","formLimit","length"],"mappings":"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","file":"routing.js","sourcesContent":["import util from 'util'\n\nimport koa_router  from 'koa-router'\nimport mount       from 'koa-mount'\nimport body_parser from 'koa-bodyparser'\n\nimport { exists, is_object, starts_with } from '../helpers'\n\n// `http` utility\nimport http from '../http'\nimport parse_dates from '../date parser'\n\nexport default function(options)\n{\n\tconst router = new koa_router()\n\n\t// These extesion methods will be added\n\t// to the webservice object later (not in this function)\n\tconst extensions = {}\n\n\t// Define handlers for HTTP requests for these HTTP methods\n\tfor (let method of ['get', 'put', 'patch', 'post', 'delete'])\n\t{\n\t\textensions[method] = function(path, action)\n\t\t{\n\t\t\t// All errors thrown from this middleware will get caught \n\t\t\t// by the error-catching middleware up the middleware chain\n\t\t\trouter[method](path, function(ctx, next)\n\t\t\t{\n\t\t\t\t// Sessions aren't currently used\n\t\t\t\tconst session = ctx.session\n\t\t\t\tconst session_id = ctx.sessionId\n\t\t\t\tconst destroy_session = () => ctx.session = null\n\n\t\t\t\t// Cookie helpers\n\n\t\t\t\tconst get_cookie = name => ctx.cookies.get(name)\n\n\t\t\t\t// https://github.com/pillarjs/cookies#cookiesset-name--value---options--\n\t\t\t\t// `path` is \"/\" by default\n\t\t\t\t// `httpOnly` is `true` by default\n\t\t\t\tconst set_cookie = (name, value, options = {}) =>\n\t\t\t\t{\n\t\t\t\t\t// Set the cookie to expire in January 2038 (the fartherst it can get)\n\t\t\t\t\t// http://stackoverflow.com/questions/3290424/set-a-cookie-to-never-expire\n\t\t\t\t\toptions.expires = options.expires || new Date(2147483647000)\n\n\t\t\t\t\tctx.cookies.set(name, value, options)\n\t\t\t\t}\n\n\t\t\t\tconst destroy_cookie = name =>\n\t\t\t\t{\n\t\t\t\t\t// Clear the coookie itself (raw value)\n\t\t\t\t\tctx.cookies.set(name, null)\n\t\t\t\t\t// The \".sig\" counterpart contains the hash of the cookie,\n\t\t\t\t\t// so clear it too (used for Koa \"signed cookies\").\n\t\t\t\t\tctx.cookies.set(name + '.sig', null)\n\t\t\t\t}\n\n\t\t\t\t// This route handler parameters,\n\t\t\t\t// which are extracted from POST body, GET query, and route parameters.\n\t\t\t\tconst parameters = { ...ctx.request.body, ...ctx.query, ...ctx.params }\n\n\t\t\t\t// Parse JSON dates (for convenience)\n\t\t\t\tparse_dates(parameters)\n\n\t\t\t\t// Treat empty string parameters as `undefined`s\n\t\t\t\tfor (let key of Object.keys(parameters))\n\t\t\t\t{\n\t\t\t\t\tif (parameters[key] === '')\n\t\t\t\t\t{\n\t\t\t\t\t\tdelete parameters[key]\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// By default, use the standard `http` utility\n\t\t\t\tlet http_client = http\n\n\t\t\t\t// If Json Web Tokens are used for authentication,\n\t\t\t\t// then add JWT Authorization header to internal HTTP requests.\n\t\t\t\tif (ctx.jwt)\n\t\t\t\t{\n\t\t\t\t\t// Customize all methods of `http` utility\n\t\t\t\t\thttp_client = {}\n\n\t\t\t\t\t// HTTP Authorization header value for a JWT token\n\t\t\t\t\tconst jwt_header = `Bearer ${ctx.jwt}`\n\n\t\t\t\t\t// For each HTTP method\n\t\t\t\t\tfor (let key of Object.keys(http))\n\t\t\t\t\t{\n\t\t\t\t\t\t// Add JWT Header to an internal HTTP request\n\t\t\t\t\t\thttp_client[key] = function(destination, data, options = {})\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Send JWT token in `Authorization` HTTP header\n\t\t\t\t\t\t\toptions.headers = options.headers || {}\n\t\t\t\t\t\t\toptions.headers.Authorization = options.headers.Authorization || jwt_header\n\n\t\t\t\t\t\t\t// Perform HTTP request\n\t\t\t\t\t\t\treturn http[key](destination, data, options)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Ð¡all the route handler with `parameters` and a utility object\n\t\t\t\tconst result = action.bind(ctx)(parameters,\n\t\t\t\t{\n\t\t\t\t\t// Client's IP address.\n\t\t\t\t\t// Trusts 'X-Forwarded-For' HTTP header.\n\t\t\t\t\tip: ctx.ip,\n\t\t\t\t\t\n\t\t\t\t\t// Cookie utilities\n\t\t\t\t\tget_cookie,\n\t\t\t\t\tset_cookie,\n\t\t\t\t\tdestroy_cookie,\n\n\t\t\t\t\t// Sessions aren't used currently\n\t\t\t\t\tsession,\n\t\t\t\t\tsession_id,\n\t\t\t\t\tdestroy_session,\n\n\t\t\t\t\t// JWT stuff\n\t\t\t\t\tuser                    : ctx.user,\n\t\t\t\t\tauthentication_error    : ctx.authentication_error,\n\t\t\t\t\tauthentication_token_id : ctx.jwt_id,\n\t\t\t\t\tauthentication_token    : ctx.jwt,\n\n\t\t\t\t\t// Applicaton's secret signing keys\n\t\t\t\t\tkeys : options.keys,\n\n\t\t\t\t\t// internal `http` utility\n\t\t\t\t\t// (only use it for internal HTTP requests,\n\t\t\t\t\t//  because it will send cookies and JWT tokens too)\n\t\t\t\t\tinternal_http : http_client\n\t\t\t\t})\n\n\t\t\t\t// Responds to this HTTP request\n\t\t\t\t// with a route handler result\n\t\t\t\tconst respond = result =>\n\t\t\t\t{\n\t\t\t\t\t// If it's a redirect, then do the redirect\n\t\t\t\t\tif (is_redirect(result))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn ctx.redirect(result.redirect)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Return some special 2xx statuses for some special HTTP methods\n\t\t\t\t\t// http://goinbigdata.com/how-to-design-practical-restful-api/\n\t\t\t\t\t// http://habrahabr.ru/company/yandex/blog/265569/\n\t\t\t\t\tswitch (method)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase 'put':\n\t\t\t\t\t\tcase 'delete':\n\t\t\t\t\t\t\tif (exists(result))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthrow new Error(`PUT and DELETE HTTP queries must not return any content.\\nRequested ${method.toUpperCase()} ${ctx.originalUrl} and got:\\n${util.inspect(result)}`)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tctx.status = 204 // No Content\n\t\t\t\t\t\t\t// No need for setting response body in this case\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\t// Default HTTP status: 200\n\t\t\t\t\tctx.status = 200\n\n\t\t\t\t\t// Send result JSON object as HTTP response body.\n\t\t\t\t\t//\n\t\t\t\t\t// `result` may not only be just a JSON object or an array:\n\t\t\t\t\t// it may also be a primitive like a string.\n\t\t\t\t\t// Hence the manual JSON stringifying and specifying content type explicitly.\n\t\t\t\t\t//\n\t\t\t\t\tctx.body = JSON.stringify(result)\n\t\t\t\t\tctx.type = 'application/json'\n\t\t\t\t}\n\n\t\t\t\t// If route handler result is a Promise,\n\t\t\t\t// then wait for it to finish, and then respond.\n\t\t\t\t// Otherwise respond immediately.\n\t\t\t\tif (result && typeof result.then === 'function')\n\t\t\t\t{\n\t\t\t\t\t// All errors thrown here will be caught\n\t\t\t\t\t// by the error-catching middleware up the middleware chain\n\t\t\t\t\treturn result.then(respond, error => { throw error })\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trespond(result)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\t// Routing requires parsing HTTP POST requests body\n\t// to be able to parse HTTP POST parameters\n\t// and pass them in `parameters` to HTTP POST route handlers.\n\t//\n\t// So if routing is enabled for all paths,\n\t// then HTTP POST request body parsing\n\t// should also be enabled globally.\n\t//\n\t// This is not a strict requirement\n\t// because one may simply opt out of using POST handlers\n\t// while still using GET handlers, for example.\n\t//\n\t// But still it's a useful simple check\n\t// to make sure a developer didn't mess up the settings.\n\t//\n\tif (typeof options.routing !== 'string')\n\t{\n\t\tif (!options.parse_body)\n\t\t{\n\t\t\tthrow new Error(`\"parse_body\" was set to false and \"routing\" was set to true. Set \"routing\" to a path then.`)\n\t\t}\n\n\t\tconst result =\n\t\t{\n\t\t\textensions,\n\t\t\tmiddleware:\n\t\t\t[\n\t\t\t\trouter.routes(),\n\t\t\t\trouter.allowedMethods()\n\t\t\t]\n\t\t}\n\n\t\treturn result\n\t}\n\telse\n\t{\n\t\tconst result =\n\t\t{\n\t\t\textensions,\n\t\t\tmiddleware:\n\t\t\t[\n\t\t\t\tmount(options.routing, body_parser({ formLimit: '100mb' })),\n\t\t\t\tmount(options.routing, router.routes()),\n\t\t\t\tmount(options.routing, router.allowedMethods())\n\t\t\t]\n\t\t}\n\n\t\treturn result\n\t}\n}\n\n// Checks if a route handler requests a redirect to a URL\n// (then `result` must have a form of `{ redirect: \"/url\" }`)\nfunction is_redirect(result)\n{\n\treturn is_object(result) && result.redirect && Object.keys(result).length === 1\n}"]}