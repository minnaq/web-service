{"version":3,"sources":["../../source/middleware/proxy.js"],"names":["path","to","options","undefined","proxy","createProxyServer","proxy_middleware","ctx","from_name","to_name","name","promise","resolve","reject","res","on","Error","web","req","target","error","code","console","result","middleware"],"mappings":";;;;;;;;;;;;;;;;;;kBAIe,UAASA,IAAT,EAAeC,EAAf,EACf;AAAA,KADkCC,OAClC,uEAD4C,EAC5C;;AACC;;AAEA,KAAI,wBAAUD,EAAV,CAAJ,EACA;AACCC,YAAUD,EAAV;AACAA,OAAKE,SAAL;AACA;;AAED,KAAI,CAAC,qBAAOF,EAAP,CAAL,EACA;AACCA,OAAKD,IAAL;AACAA,SAAOG,SAAP;AACA;;AAED;AACA,KAAMC,QAAQ,oBAAWC,iBAAX,CAA6BH,OAA7B,CAAd;;AAEA;AACA,UAASI,gBAAT,CAA0BL,EAA1B,EACA;AACC;AAAA,yEAAO,iBAAeM,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAEN;AACMC,iBAHA,GAGYD,IAAIP,IAHhB,EAGqB;;AACrBS,eAJA,GAIUP,QAAQQ,IAAR,IAAgBT,EAJ1B;AAMAU,eANA,GAMU,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAC5B;AACC;AACA;AACAN,aAAIO,GAAJ,CAAQC,EAAR,CAAW,OAAX,EAAoB,YACpB;AACCF,iBAAO,IAAIG,KAAJ,2CAAkDR,SAAlD,aAAmEC,OAAnE,CAAP;AACA,UAHD;;AAKA;AACAF,aAAIO,GAAJ,CAAQC,EAAR,CAAW,QAAX,EAAqB,YACrB;AACCH;AACA,UAHD;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,eAAMa,GAAN,CAAUV,IAAIW,GAAd,EAAmBX,IAAIO,GAAvB,EAA4B,EAAEK,QAAQlB,EAAV,EAA5B,EAA4C,iBAC5C;AACC;AACA,cAAImB,MAAMC,IAAN,KAAe,cAAnB,EACA;AACCD,mBAAQ,IAAIJ,KAAJ,uBAA6BR,SAA7B,aAA8CC,OAA9C,qBAAR;AACA;;AAED;AACA;AACA,cAAIW,MAAMC,IAAN,KAAe,YAAnB,EACA;AACCD,mBAAQ,IAAIJ,KAAJ,sCAA6CR,SAA7C,aAA8DC,OAA9D,CAAR;AACA;;AAEDa,kBAAQF,KAAR;AACAP,iBAAOO,KAAP;;AAEA;AACA;AACA,UApBD;AAqBA,SA3Ce,CANV;AAAA;AAAA,eAmDAT,OAnDA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;;AAAA;AAAA;AAAA;AAAA;AAqDA;;AAED;AACA,KAAMY,SAAS,EAAEnB,YAAF,EAAf;;AAEA;AACA,KAAIJ,IAAJ,EACA;AACCuB,SAAOC,UAAP,GAAoB,wBAAMxB,IAAN,EAAYM,iBAAiBL,EAAjB,CAAZ,CAApB;AACA;AACD;AAJA,MAMA;AACCsB,UAAOC,UAAP,GAAoBlB,iBAAiBL,EAAjB,CAApB;AACA;;AAED,QAAOsB,MAAP;AACA,C;;AAhGD;;;;AACA;;;;AACA","file":"proxy.js","sourcesContent":["import http_proxy from 'http-proxy'\nimport mount      from 'koa-mount'\nimport { exists, is_object } from '../helpers'\n\nexport default function(path, to, options = {})\n{\n\t// Normalize arguments\n\t\n\tif (is_object(to))\n\t{\n\t\toptions = to\n\t\tto = undefined\n\t}\n\n\tif (!exists(to))\n\t{\n\t\tto = path\n\t\tpath = undefined\n\t}\n\n\t// Create proxy server\n\tconst proxy = http_proxy.createProxyServer(options)\n\n\t// Koa middleware\n\tfunction proxy_middleware(to)\n\t{\n\t\treturn async function(ctx)\n\t\t{\n\t\t\t// These two variables are used for generating error messages\n\t\t\tconst from_name = ctx.path // .substring(path.length)\n\t\t\tconst to_name = options.name || to\n\n\t\t\tconst promise = new Promise((resolve, reject) =>\n\t\t\t{\n\t\t\t\t// Abrupt closing of HTTP response from the remote server\n\t\t\t\t// (e.g. due to an error)\n\t\t\t\tctx.res.on('close', () =>\n\t\t\t\t{\n\t\t\t\t\treject(new Error(`Http response closed while proxying \"${from_name}\" to ${to_name}`))\n\t\t\t\t})\n\n\t\t\t\t// When proxying finishes without errors\n\t\t\t\tctx.res.on('finish', () =>\n\t\t\t\t{\n\t\t\t\t\tresolve()\n\t\t\t\t})\n\n\t\t\t\t// Do the proxying.\n\t\t\t\t//\n\t\t\t\t// promisify(proxy.web, proxy) won't work here,\n\t\t\t\t// because the last parameter is not a \"callback\",\n\t\t\t\t// it's just an error handler.\n\t\t\t\t// https://github.com/nodejitsu/node-http-proxy/issues/951\n\t\t\t\t//\n\t\t\t\tproxy.web(ctx.req, ctx.res, { target: to }, error =>\n\t\t\t\t{\n\t\t\t\t\t// Give meaningful description to \"Connection refused\" error\n\t\t\t\t\tif (error.code === 'ECONNREFUSED')\n\t\t\t\t\t{\n\t\t\t\t\t\terror = new Error(`Couldn't proxy \"${from_name}\" to ${to_name}. No connection`)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Give meaningful description to \"Socket hang up\"\n\t\t\t\t\t// (probably it's caught here)\n\t\t\t\t\tif (error.code === 'ECONNRESET')\n\t\t\t\t\t{\n\t\t\t\t\t\terror = new Error(`Lost connection while proxying \"${from_name}\" to ${to_name}`)\n\t\t\t\t\t}\n\n\t\t\t\t\tconsole.error(`Proxy error`)\n\t\t\t\t\treject(error)\n\n\t\t\t\t\t// response.writeHead(502)\n\t\t\t\t\t// response.end(\"There was an error proxying your request\")\n\t\t\t\t})\n\t\t\t})\n\n\t\t\tawait promise\n\t\t}\n\t}\n\n\t// The result to be returned\n\tconst result = { proxy }\n\n\t// Proxy only HTTP requests for a certain path\n\tif (path)\n\t{\n\t\tresult.middleware = mount(path, proxy_middleware(to))\n\t}\n\t// Or just proxy all incoming HTTP requests\n\telse\n\t{\n\t\tresult.middleware = proxy_middleware(to)\n\t}\n\n\treturn result\n}"]}