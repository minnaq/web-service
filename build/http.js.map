{"version":3,"sources":["../source/http.js"],"names":["methods","http_client","method","destination","data","options","url","format_url","resolve","reject","request","query","send","Error","headers","set","end","error","response","status","statusCode","type","body","message","text","html","stack","JSON","parse","host","port","path"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA;AACA,IAAMA,UACN,CACC,KADD,EAEC,MAFD,EAGC,KAHD,EAIC,OAJD,EAKC,QALD,EAMC,MAND,EAOC,SAPD,CADA;;AAWA,IAAMC,cAAc,EAApB;;AAEA;;;;;;;MACSC,M;;AAERD,cAAYC,MAAZ,IAAsB,UAACC,WAAD,EAAcC,IAAd,EACtB;AAAA,OAD0CC,OAC1C,uEADoD,EACpD;;AACC,OAAMC,MAAMC,WAAWJ,WAAX,CAAZ;;AAEA,UAAO,sBAAY,UAACK,OAAD,EAAUC,MAAV,EACnB;AACC;AACA,QAAMC,UAAU,qBAAWR,MAAX,EAAmBI,GAAnB,CAAhB;;AAEA;AACA,QAAIF,IAAJ,EACA;AACC,aAAQF,MAAR;AAEC,WAAK,KAAL;AACCQ,eAAQC,KAAR,CAAcP,IAAd;AACA;;AAED,WAAK,MAAL;AACA,WAAK,KAAL;AACA,WAAK,OAAL;AACA,WAAK,MAAL;AACA,WAAK,SAAL;AACCM,eAAQE,IAAR,CAAaR,IAAb;AACA;;AAED,WAAK,QAAL;AACC,aAAM,IAAIS,KAAJ,+CAAsD,yBAAeT,IAAf,CAAtD,CAAN;;AAED;AACC,aAAM,IAAIS,KAAJ,2BAAkCX,MAAlC,CAAN;AAlBF;AAoBA;;AAED;AACA,QAAIG,QAAQS,OAAZ,EACA;AACCJ,aAAQK,GAAR,CAAYV,QAAQS,OAApB;AACA;;AAED;AACAJ,YAAQM,GAAR,CAAY,UAACC,KAAD,EAAQC,QAAR,EACZ;AACC;AACA,SAAID,KAAJ,EACA;AACC;AACA;;AAEA;;AAEA;AACA,UAAIC,QAAJ,EACA;AACC;AACAD,aAAME,MAAN,GAAeD,SAASE,UAAxB;;AAEA,eAAQF,SAASG,IAAjB;AAEC;AACA,aAAK,kBAAL;AACC;AACAJ,eAAMb,IAAN,GAAa,0BAAYc,SAASI,IAArB,CAAb;;AAEA;AACA,aAAIL,MAAMb,IAAN,CAAWmB,OAAf,EACA;AACCN,gBAAMM,OAAN,GAAgBN,MAAMb,IAAN,CAAWmB,OAA3B;AACA;;AAED;;AAED;AACA;AACA;AACA;;AAEA,aAAK,YAAL;AACCN,eAAMM,OAAN,GAAgBL,SAASM,IAAzB;AACA;;AAED,aAAK,WAAL;AACCP,eAAMQ,IAAN,GAAaP,SAASM,IAAtB;;AAEA;AACA,aAAIN,SAASJ,OAAT,CAAiB,iBAAjB,CAAJ,EACA;AACCG,gBAAMM,OAAN,GAAgBL,SAASJ,OAAT,CAAiB,iBAAjB,CAAhB;AACA;;AAED;AACA,aAAII,SAASJ,OAAT,CAAiB,qBAAjB,CAAJ,EACA;AACCG,gBAAMS,KAAN,GAAcC,KAAKC,KAAL,CAAWV,SAASJ,OAAT,CAAiB,qBAAjB,CAAX,CAAd;AACA;;AAED;AAvCF;AAyCA;;AAED;AACA,aAAOL,OAAOQ,KAAP,CAAP;AACA;;AAED;AACA;;AAEA;AACA;AACA;AACA,SAAIC,SAASE,UAAT,KAAwB,GAA5B,EACA;AACC,aAAOZ,SAAP;AACA;;AAED;AACAA,aAAQ,0BAAYU,SAASI,IAArB,CAAR;AACA,KA5ED;AA6EA,IAlHM,CAAP;AAmHA,GAvHD;;;AAFD,iDAAmBtB,OAAnB,4GACA;AAAA;AAyHC;;;;;;;;;;;;;;;;AAED,SAASO,UAAT,CAAoBJ,WAApB,EACA;AACC,KAAI,wBAAUA,WAAV,CAAJ,EACA;AACC;AACA,qBAAiBA,YAAY0B,IAA7B,SAAqC1B,YAAY2B,IAAjD,GAAwD3B,YAAY4B,IAApE;AACA;;AAED;AACA,QAAO5B,WAAP;AACA;;kBAEcF,W","file":"http.js","sourcesContent":["import superagent from 'superagent'\nimport { is_object } from './helpers'\nimport parse_dates from './date parser'\n\n// HTTP request methods\nconst methods =\n[\n\t'get',\n\t'post',\n\t'put',\n\t'patch',\n\t'delete',\n\t'head',\n\t'options'\n]\n\nconst http_client = {}\n\n// Define HTTP methods on `http_client` object\nfor (let method of methods)\n{\n\thttp_client[method] = (destination, data, options = {}) =>\n\t{\n\t\tconst url = format_url(destination)\n\n\t\treturn new Promise((resolve, reject) =>\n\t\t{\n\t\t\t// Create Http request\n\t\t\tconst request = superagent[method](url)\n\n\t\t\t// Attach data to the outgoing HTTP request\n\t\t\tif (data)\n\t\t\t{\n\t\t\t\tswitch (method)\n\t\t\t\t{\n\t\t\t\t\tcase 'get':\n\t\t\t\t\t\trequest.query(data)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'post':\n\t\t\t\t\tcase 'put':\n\t\t\t\t\tcase 'patch':\n\t\t\t\t\tcase 'head':\n\t\t\t\t\tcase 'options':\n\t\t\t\t\t\trequest.send(data)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'delete':\n\t\t\t\t\t\tthrow new Error(`\"data\" supplied for HTTP DELETE request: ${JSON.stringify(data)}`)\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unknown HTTP method: ${method}`)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Apply this HTTP request specific HTTP headers\n\t\t\tif (options.headers)\n\t\t\t{\n\t\t\t\trequest.set(options.headers)\n\t\t\t}\n\n\t\t\t// Send HTTP request\n\t\t\trequest.end((error, response) => \n\t\t\t{\n\t\t\t\t// If there was an error, then reject the Promise\n\t\t\t\tif (error)\n\t\t\t\t{\n\t\t\t\t\t// `superagent` would have already output the error to console\n\t\t\t\t\t// console.error(error.stack)\n\n\t\t\t\t\t// console.log('[react-isomorphic-render] (http request error)')\n\n\t\t\t\t\t// Populate error from the HTTP response\n\t\t\t\t\tif (response)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Set `error` `status` to HTTP response status code\n\t\t\t\t\t\terror.status = response.statusCode\n\n\t\t\t\t\t\tswitch (response.type)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Set error `data` from response body,\n\t\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\t\t\t// if (!is_object(error.data))\n\t\t\t\t\t\t\t\terror.data = parse_dates(response.body)\n\n\t\t\t\t\t\t\t\t// Set the more meaningful message for the error (if available)\n\t\t\t\t\t\t\t\tif (error.data.message)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\terror.message = error.data.message\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t// If the HTTP response was not a JSON object,\n\t\t\t\t\t\t\t// but rather a text or an HTML page,\n\t\t\t\t\t\t\t// then include that information in the `error`\n\t\t\t\t\t\t\t// for future reference (e.g. easier debugging).\n\n\t\t\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\t\t\terror.message = response.text\n\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\tcase 'text/html':\n\t\t\t\t\t\t\t\terror.html = response.text\n\n\t\t\t\t\t\t\t\t// Recover the original error message (if any)\n\t\t\t\t\t\t\t\tif (response.headers['x-error-message'])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\terror.message = response.headers['x-error-message']\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Recover the original error stack trace (if any)\n\t\t\t\t\t\t\t\tif (response.headers['x-error-stack-trace'])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\terror.stack = JSON.parse(response.headers['x-error-stack-trace'])\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// HTTP request failed with an `error`\n\t\t\t\t\treturn reject(error)\n\t\t\t\t}\n\n\t\t\t\t// HTTP request completed without errors,\n\t\t\t\t// so return the HTTP response data.\n\n\t\t\t\t// If HTTP response status is \"204 - No content\"\n\t\t\t\t// (e.g. PUT, DELETE)\n\t\t\t\t// then resolve with an empty result\n\t\t\t\tif (response.statusCode === 204)\n\t\t\t\t{\n\t\t\t\t\treturn resolve()\n\t\t\t\t}\n\n\t\t\t\t// Else, the result is HTTP response body\n\t\t\t\tresolve(parse_dates(response.body))\n\t\t\t})\n\t\t})\n\t}\n}\n\nfunction format_url(destination)\n{\n\tif (is_object(destination))\n\t{\n\t\t// Prepend host and port of the API server to the path.\n\t\treturn `http://${destination.host}:${destination.port}${destination.path}`\n\t}\n\n\t// Prepend prefix to relative URL, to proxy to API server.\n\treturn destination\n}\n\nexport default http_client"]}